plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

group 'nl.jovmit.lyrics'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.sparkjava:spark-core:2.8.0'
    implementation 'org.slf4j:slf4j-api:1.7.5'
    implementation 'org.slf4j:slf4j-simple:1.6.4'
    implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.6.2'
    testImplementation 'org.mockito:mockito-core:2.1.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.23.0'
    testImplementation 'io.rest-assured:rest-assured:4.3.0'
    testImplementation 'io.rest-assured:kotlin-extensions:4.3.0'
    testImplementation 'org.assertj:assertj-core:2.9.1'
    testImplementation 'org.assertj:assertj-neo4j:2.0.1'
    testImplementation 'junit:junit:4.13'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.2"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest {
        attributes 'Main-Class': 'nl.jovmit.lyrics.app.AppLauncher'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "IT_*"
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) {
            test.enabled = false
        }
}